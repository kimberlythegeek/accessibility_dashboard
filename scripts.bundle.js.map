{"version":3,"sources":["node_modules/selenium-webdriver/firefox.js","node_modules/selenium-webdriver/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,4BAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mBAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,sBAAsB;AAC7B,OAAO,IAAI;;;AAGX;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iEAAiE,UAAU;AAC3E;;AAEA;AACA,OAAO,aAAa;AACpB,kBAAkB,cAAc,OAAO,aAAa;AACpD;AACA;AACA,+DAA+D,UAAU;AACzE;;AAEA,8BAA8B,sCAAsC;AACpE;AACA;;;AAGA;AACA;AACA,kBAAkB,QAAQ;AAC1B;;AAEA,kBAAkB,eAAe;AACjC;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,6BAA6B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,sCAAsC;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,8BAA8B;AACpC;AACA,cAAc,+BAA+B;AAC7C,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA,8CAA8C,MAAM,GAAG,OAAO;AAC9D;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,wBAAwB;AACrC,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB;AACA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA,iEAAiE,aAAa;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA,aAAa,kBAAkB;AAC/B,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,IAAI,gBAAgB;AACpB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;;AAGA;AACA,YAAY,OAAO;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,kBAAkB;AAC9B,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;AAGA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,iBAAiB;AAC5B,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA,SAAS,cAAc,KAAK,mBAAmB;AAC/C,aAAa,sCAAsC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,sBAAsB,QAAQ;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,qCAAqC;AACxE;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;CChwBA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,IAAI;AACJ;AACA;AACA,QAAQ,oBAAoB,MAAM,qBAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yCAAyC;AACpD,YAAY;AACZ;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,oCAAoC;AACpC,uBAAuB;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;;;AAGA;AACA,WAAW;AACX;AACA;AACA;;;AAGA;AACA,WAAW,qDAAqD;AAChE,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B,oBAAoB;AACpB;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC,iBAAiB,KAAK;AACtB;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA,MAAM,uBAAuB;AAC7B,MAAM,mCAAmC;AACzC;AACA,MAAM,0BAA0B;AAChC;AACA;AACA,0CAA0C,0BAA0B;AACpE;AACA,MAAM,0BAA0B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,OAAO;AACzB;;AAEA,kBAAkB,QAAQ;AAC1B;;AAEA,kBAAkB,cAAc;AAChC;;AAEA,kBAAkB,eAAe;AACjC;;AAEA,kBAAkB,sBAAsB;AACxC;;AAEA,kBAAkB,gBAAgB;AAClC;;AAEA,kBAAkB,uBAAuB;AACzC;;AAEA,kBAAkB,WAAW;AAC7B;;AAEA,kBAAkB,eAAe;AACjC;;AAEA,kBAAkB,aAAa;AAC/B;;AAEA,kBAAkB,6BAA6B;AAC/C;;AAEA,kBAAkB,QAAQ;AAC1B;;AAEA,kBAAkB,WAAW;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B,+CAA+C,wBAAwB;AACvE,aAAa,QAAQ,+BAA+B;AACpD;AACA,aAAa,iCAAiC;AAC9C,8BAA8B;AAC9B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA,aAAa,oBAAoB;AACjC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,wBAAwB;AACvE,aAAa,oDAAoD;AACjE;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,gCAAgC;AAC7C,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA,MAAM,uBAAuB,MAAM,gBAAgB;AACnD;AACA,aAAa,gBAAgB;AAC7B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA,MAAM,uBAAuB,MAAM,gBAAgB;AACnD;AACA,aAAa,iBAAiB;AAC9B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,8BAA8B;AACnE;AACA,kDAAkD,gBAAgB;AAClE;AACA,aAAa,YAAY;AACzB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,gCAAgC;AAC1C;AACA;AACA,MAAM,gBAAgB;AACtB;AACA,aAAa,cAAc;AAC3B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA,aAAa,oBAAoB;AACjC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,kCAAkC;AAC7D;AACA,kDAAkD,uBAAuB;AACzE;AACA,aAAa,gBAAgB;AAC7B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D;AACA;AACA,MAAM,yCAAyC;AAC/C;AACA;AACA,cAAc,mBAAmB;AACjC,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,6BAA6B;AACtE;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sDAAsD,eAAe,EAAE;AACvE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA,KAAK;AACL;;AAEA,KAAK;AACL;;AAEA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA,OAAO;AACP;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,4BAA4B;AACvC,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,IAAI,EAAE;AACxB,yBAAyB,UAAU;AACnC;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"scripts.bundle.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The profile used for each WebDriver session may be configured using the\n * {@linkplain Options} class. For example, you may install an extension, like\n * Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .addExtensions('/path/to/firebug.xpi')\n *         .setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Options} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing';\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configrue WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transfered to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n\n'use strict';\n\nconst path = require('path');\nconst url = require('url');\n\nconst Symbols = require('./lib/symbols');\nconst command = require('./lib/command');\nconst exec = require('./io/exec');\nconst http = require('./http');\nconst httpUtil = require('./http/util');\nconst io = require('./io');\nconst net = require('./net');\nconst portprober = require('./net/portprober');\nconst remote = require('./remote');\nconst webdriver = require('./lib/webdriver');\nconst zip = require('./io/zip');\nconst {Browser, Capabilities} = require('./lib/capabilities');\nconst {Zip} = require('./io/zip');\n\n\n/**\n * Thrown when there an add-on is malformed.\n * @final\n */\nclass AddonFormatError extends Error {\n  /** @param {string} msg The error message. */\n  constructor(msg) {\n    super(msg);\n    /** @override */\n    this.name = this.constructor.name;\n  }\n}\n\n\n/**\n * Installs an extension to the given directory.\n * @param {string} extension Path to the xpi extension file to install.\n * @param {string} dir Path to the directory to install the extension in.\n * @return {!Promise<string>} A promise for the add-on ID once\n *     installed.\n */\nasync function installExtension(extension, dir) {\n  if (extension.slice(-4) !== '.xpi') {\n    throw Error('Path ath is not a xpi file: ' + extension);\n  }\n\n  let archive = await zip.load(extension);\n  if (!archive.has('manifest.json')) {\n    throw new AddonFormatError(`Couldn't find manifest.json in ${extension}`);\n  }\n\n  let buf = await archive.getFile('manifest.json');\n  let {applications} =\n      /** @type {{applications:{gecko:{id:string}}}} */(\n          JSON.parse(buf.toString('utf8')));\n  if (!(applications && applications.gecko && applications.gecko.id)) {\n    throw new AddonFormatError(`Could not find add-on ID for ${extension}`);\n  }\n\n  await io.copy(extension, `${path.join(dir, applications.gecko.id)}.xpi`);\n  return applications.gecko.id;\n}\n\n\nclass Profile {\n  constructor() {\n    /** @private {?string} */\n    this.template_ = null;\n\n    /** @private {!Array<string>} */\n    this.extensions_ = [];\n  }\n\n  addExtensions(/** !Array<string> */paths) {\n    this.extensions_ = this.extensions_.concat(...paths);\n  }\n\n  /**\n   * @return {(!Promise<string>|undefined)} a promise for a base64 encoded\n   *     profile, or undefined if there's no data to include.\n   */\n  [Symbols.serialize]() {\n    if (this.template_ || this.extensions_.length) {\n      return buildProfile(this.template_, this.extensions_);\n    }\n    return undefined;\n  }\n}\n\n\n/**\n * @param {?string} template path to an existing profile to use as a template.\n * @param {!Array<string>} extensions paths to extensions to install in the new\n *     profile.\n * @return {!Promise<string>} a promise for the base64 encoded profile.\n */\nasync function buildProfile(template, extensions) {\n  let dir = template;\n\n  if (extensions.length) {\n    dir = await io.tmpDir();\n    if (template) {\n      await io.copyDir(\n          /** @type {string} */(template),\n          dir, /(parent\\.lock|lock|\\.parentlock)/);\n    }\n\n    const extensionsDir = path.join(dir, 'extensions');\n    await io.mkdir(extensionsDir);\n\n    for (let i = 0; i < extensions.length; i++) {\n      await installExtension(extensions[i], extensionsDir);\n    }\n  }\n\n  let zip = new Zip;\n  return zip.addDir(dir)\n      .then(() => zip.toBuffer())\n      .then(buf => buf.toString('base64'));\n}\n\n\n/**\n * Configuration options for the FirefoxDriver.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other) {\n    super(other);\n    this.setBrowserName(Browser.FIREFOX);\n  }\n\n  /**\n   * @return {!Object}\n   * @private\n   */\n  firefoxOptions_() {\n    let options = this.get('moz:firefoxOptions');\n    if (!options) {\n      options = {};\n      this.set('moz:firefoxOptions', options);\n    }\n    return options;\n  }\n\n  /**\n   * @return {!Profile}\n   * @private\n   */\n  profile_() {\n    let options = this.firefoxOptions_();\n    if (!options.profile) {\n      options.profile = new Profile();\n    }\n    return options.profile;\n  }\n\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    if (args.length) {\n      let options = this.firefoxOptions_();\n      options.args = options.args ? options.args.concat(...args) : args;\n    }\n    return this;\n  }\n\n  /**\n   * Configures the geckodriver to start Firefox in headless mode.\n   *\n   * @return {!Options} A self reference.\n   */\n  headless() {\n    return this.addArguments('-headless');\n  }\n\n  /**\n   * Sets the initial window size when running in\n   * {@linkplain #headless headless} mode.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({width, height}) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0');\n      }\n    }\n    checkArg(width);\n    checkArg(height);\n    return this.addArguments(`--window-size=${width},${height}`);\n  }\n\n  /**\n   * Add extensions that should be installed when starting Firefox.\n   *\n   * @param {...string} paths The paths to the extension XPI files to install.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(...paths) {\n    this.profile_().addExtensions(paths);\n    return this;\n  }\n\n  /**\n   * @param {string} key the preference key.\n   * @param {(string|number|boolean)} value the preference value.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if either the key or value has an invalid type.\n   */\n  setPreference(key, value) {\n    if (typeof key !== 'string') {\n      throw TypeError(`key must be a string, but got ${typeof key}`);\n    }\n    if (typeof value !== 'string'\n        && typeof value !== 'number'\n        && typeof value !== 'boolean') {\n      throw TypeError(\n          `value must be a string, number, or boolean, but got ${typeof value}`);\n    }\n    let options = this.firefoxOptions_();\n    options.prefs = options.prefs || {};\n    options.prefs[key] = value;\n    return this;\n  }\n\n  /**\n   * Sets the path to an existing profile to use as a template for new browser\n   * sessions. This profile will be copied for each new session - changes will\n   * not be applied to the profile itself.\n   *\n   * @param {string} profile The profile to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if profile is not a string.\n   */\n  setProfile(profile) {\n    if (typeof profile !== 'string') {\n      throw TypeError(`profile must be a string, but got ${typeof profile}`);\n    }\n    this.profile_().template_ = profile;\n    return this;\n  }\n\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable or a desired release {@link Channel}.\n   *\n   * @param {(string|!Channel)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n  setBinary(binary) {\n    if (binary instanceof Channel || typeof binary === 'string') {\n      this.firefoxOptions_().binary = binary;\n      return this;\n    }\n    throw TypeError('binary must be a string path or Channel object');\n  }\n}\n\n\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\nconst Context = {\n  CONTENT: \"content\",\n  CHROME: \"chrome\",\n};\n\n\nconst GECKO_DRIVER_EXE =\n    process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n\n\n/**\n * _Synchronously_ attempts to locate the geckodriver executable on the current\n * system.\n *\n * @return {?string} the located executable, or `null`.\n */\nfunction locateSynchronously() {\n  return io.findInPath(GECKO_DRIVER_EXE, true);\n}\n\n\n/**\n * @return {string} .\n * @throws {Error}\n */\nfunction findGeckoDriver() {\n  let exe = locateSynchronously();\n  if (!exe) {\n    throw Error(\n      'The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' +\n      'PATH. Please download the latest version from ' +\n      'https://github.com/mozilla/geckodriver/releases/ ' +\n      'and ensure it can be found on your PATH.');\n  }\n  return exe;\n}\n\n\n/**\n * @param {string} file Path to the file to find, relative to the program files\n *     root.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\nfunction findInProgramFiles(file) {\n  let files = [\n    process.env['PROGRAMFILES'] || 'C:\\\\Program Files',\n    process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)'\n  ].map(prefix => path.join(prefix, file));\n  return io.exists(files[0]).then(function(exists) {\n    return exists ? files[0] : io.exists(files[1]).then(function(exists) {\n      return exists ? files[1] : null;\n    });\n  });\n}\n\n\n/** @enum {string} */\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext',\n  INSTALL_ADDON: 'install addon',\n  UNINSTALL_ADDON: 'uninstall addon',\n};\n\n\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n\n\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(\n      ExtensionCommand.GET_CONTEXT,\n      'GET',\n      '/session/:sessionId/moz/context');\n\n  executor.defineCommand(\n      ExtensionCommand.SET_CONTEXT,\n      'POST',\n      '/session/:sessionId/moz/context');\n\n  executor.defineCommand(\n      ExtensionCommand.INSTALL_ADDON,\n      'POST',\n      '/session/:sessionId/moz/addon/install');\n\n  executor.defineCommand(\n      ExtensionCommand.UNINSTALL_ADDON,\n      'POST',\n      '/session/:sessionId/moz/addon/uninstall');\n}\n\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findGeckoDriver());\n    this.setLoopback(true);  // Required.\n  }\n\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v');\n  }\n}\n\n\n/**\n * A WebDriver client for Firefox.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link Capabilities}, or as a raw hash object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor) {\n    let caps =\n        opt_config instanceof Capabilities\n            ? opt_config : new Options(opt_config);\n\n    let executor;\n    let onQuit;\n\n    if (opt_executor instanceof http.Executor) {\n      executor = opt_executor;\n      configureExecutor(executor);\n    } else if (opt_executor instanceof remote.DriverService) {\n      executor = createExecutor(opt_executor.start());\n      onQuit = () => opt_executor.kill();\n    } else {\n      let service = new ServiceBuilder().build();\n      executor = createExecutor(service.start());\n      onQuit = () => service.kill();\n    }\n\n    return /** @type {!Driver} */(super.createSession(executor, caps, onQuit));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {\n  }\n\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!Promise<Context>} Current context.\n   */\n  getContext() {\n    return this.execute(new command.Command(ExtensionCommand.GET_CONTEXT));\n  }\n\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!Promise<void>} ctx The context to switch to.\n   */\n  setContext(ctx) {\n    return this.execute(\n        new command.Command(ExtensionCommand.SET_CONTEXT)\n            .setParameter(\"context\", ctx));\n  }\n\n  /**\n   * Installs a new addon with the current session. This function will return an\n   * ID that may later be used to {@linkplain #uninstallAddon uninstall} the\n   * addon.\n   *\n   *\n   * @param {string} path Path on the local filesystem to the web extension to\n   *     install.\n   * @return {!Promise<string>} A promise that will resolve to an ID for the\n   *     newly installed addon.\n   * @see #uninstallAddon\n   */\n  async installAddon(path) {\n    let buf = await io.read(path);\n    return this.execute(\n        new command.Command(ExtensionCommand.INSTALL_ADDON)\n            .setParameter('addon', buf.toString('base64')));\n  }\n\n  /**\n   * Uninstalls an addon from the current browser session's profile.\n   *\n   * @param {(string|!Promise<string>)} id ID of the addon to uninstall.\n   * @return {!Promise} A promise that will resolve when the operation has\n   *     completed.\n   * @see #installAddon\n   */\n  async uninstallAddon(id) {\n    id = await Promise.resolve(id);\n    return this.execute(\n        new command.Command(ExtensionCommand.UNINSTALL_ADDON)\n            .setParameter('id', id));\n  }\n}\n\n\n/**\n * Provides methods for locating the executable for a Firefox release channel\n * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always\n * be located on the system PATH.\n *\n * @final\n */\nclass Channel {\n  /**\n   * @param {string} darwin The path to check when running on MacOS.\n   * @param {string} win32 The path to check when running on Windows.\n   */\n  constructor(darwin, win32) {\n    /** @private @const */ this.darwin_ = darwin;\n    /** @private @const */ this.win32_ = win32;\n    /** @private {Promise<string>} */\n    this.found_ = null;\n  }\n\n  /**\n   * Attempts to locate the Firefox executable for this release channel. This\n   * will first check the default installation location for the channel before\n   * checking the user's PATH. The returned promise will be rejected if Firefox\n   * can not be found.\n   *\n   * @return {!Promise<string>} A promise for the location of the located\n   *     Firefox executable.\n   */\n  locate() {\n    if (this.found_) {\n      return this.found_;\n    }\n\n    let found;\n    switch (process.platform) {\n      case 'darwin':\n        found = io.exists(this.darwin_)\n            .then(exists => exists ? this.darwin_ : io.findInPath('firefox'));\n        break;\n\n      case 'win32':\n        found = findInProgramFiles(this.win32_)\n            .then(found => found || io.findInPath('firefox.exe'));\n        break;\n\n      default:\n        found = Promise.resolve(io.findInPath('firefox'));\n        break;\n    }\n\n    this.found_ = found.then(found => {\n      if (found) {\n        // TODO: verify version info.\n        return found;\n      }\n      throw Error('Could not locate Firefox on the current system');\n    });\n    return this.found_;\n  }\n\n  /** @return {!Promise<string>} */\n  [Symbols.serialize]() {\n    return this.locate();\n  }\n}\n\n\n/**\n * Firefox's developer channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#aurora>\n */\nChannel.AURORA = new Channel(\n  '/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin',\n  'Firefox Developer Edition\\\\firefox.exe');\n\n/**\n * Firefox's beta channel. Note this is provided mainly for convenience as\n * the beta channel has the same installation location as the main release\n * channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>\n */\nChannel.BETA = new Channel(\n  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',\n  'Mozilla Firefox\\\\firefox.exe');\n\n/**\n * Firefox's release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/desktop/>\n */\nChannel.RELEASE = new Channel(\n  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',\n  'Mozilla Firefox\\\\firefox.exe');\n\n/**\n * Firefox's nightly release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>\n */\nChannel.NIGHTLY = new Channel(\n  '/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin',\n  'Nightly\\\\firefox.exe');\n\n\n// PUBLIC API\n\n\nexports.Channel = Channel;\nexports.Context = Context;\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.locateSynchronously = locateSynchronously;\n\n\n\n// WEBPACK FOOTER //\n// node_modules/selenium-webdriver/firefox.js","// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n\n'use strict';\n\nconst _http = require('./http');\nconst by = require('./lib/by');\nconst capabilities = require('./lib/capabilities');\nconst chrome = require('./chrome');\nconst command = require('./lib/command');\nconst edge = require('./edge');\nconst error = require('./lib/error');\nconst firefox = require('./firefox');\nconst ie = require('./ie');\nconst input = require('./lib/input');\nconst logging = require('./lib/logging');\nconst promise = require('./lib/promise');\nconst remote = require('./remote');\nconst safari = require('./safari');\nconst session = require('./lib/session');\nconst until = require('./lib/until');\nconst webdriver = require('./lib/webdriver');\n\nconst Browser = capabilities.Browser;\nconst Capabilities = capabilities.Capabilities;\nconst Capability = capabilities.Capability;\nconst Session = session.Session;\nconst WebDriver = webdriver.WebDriver;\n\n\n\nvar seleniumServer;\n\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar);\n  }\n  return seleniumServer.start();\n}\n\n\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  const mixin = class extends ctor {\n    /** @param {input.FileDetector} detector */\n    setFileDetector(detector) {\n      webdriver.WebDriver.prototype.setFileDetector.call(this, detector);\n    }\n  };\n  return mixin;\n}\n\n\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {IThenable<!webdriver.IWebDriver>}\n * @interface\n */\nclass ThenableWebDriver {\n  /** @param {...?} args */\n  static createSession(...args) {}\n}\n\n\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\nconst THENABLE_DRIVERS = new Map;\n\n\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\nfunction createDriver(ctor, ...args) {\n  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor);\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = class extends ctor {\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      constructor(session, ...rest) {\n        super(session, ...rest);\n\n        const pd = this.getSession().then(session => {\n          return new ctor(session, ...rest);\n        });\n\n        /** @override */\n        this.then = pd.then.bind(pd);\n\n        /** @override */\n        this.catch = pd.catch.bind(pd);\n      }\n    };\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy);\n  }\n  return thenableWebDriverProxy.createSession(...args);\n}\n\n\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"http://selenium-release.storage.googleapis.com/index.html\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\nclass Builder {\n  constructor() {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.Builder');\n\n    /** @private {string} */\n    this.url_ = '';\n\n    /** @private {?string} */\n    this.proxy_ = null;\n\n    /** @private {!Capabilities} */\n    this.capabilities_ = new Capabilities();\n\n    /** @private {chrome.Options} */\n    this.chromeOptions_ = null;\n\n    /** @private {chrome.ServiceBuilder} */\n    this.chromeService_ = null;\n\n    /** @private {firefox.Options} */\n    this.firefoxOptions_ = null;\n\n    /** @private {firefox.ServiceBuilder} */\n    this.firefoxService_ = null;\n\n    /** @private {ie.Options} */\n    this.ieOptions_ = null;\n\n    /** @private {safari.Options} */\n    this.safariOptions_ = null;\n\n    /** @private {edge.Options} */\n    this.edgeOptions_ = null;\n\n    /** @private {remote.DriverService.Builder} */\n    this.edgeService_ = null;\n\n    /** @private {boolean} */\n    this.ignoreEnv_ = false;\n\n    /** @private {http.Agent} */\n    this.agent_ = null;\n  }\n\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n  disableEnvironmentOverrides() {\n    this.ignoreEnv_ = true;\n    return this;\n  }\n\n  /**\n   * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n   * been specified, the builder direct all new clients to that server. If this\n   * method is never called, the Builder will attempt to create all clients\n   * locally.\n   *\n   * As an alternative to this method, you may also set the\n   * `SELENIUM_REMOTE_URL` environment variable.\n   *\n   * @param {string} url The URL of a remote server to use.\n   * @return {!Builder} A self reference.\n   */\n  usingServer(url) {\n    this.url_ = url;\n    return this;\n  }\n\n  /**\n   * @return {string} The URL of the WebDriver server this instance is\n   *     configured to use.\n   */\n  getServerUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n   * If this method is never called, the Builder will create a connection\n   * without a proxy.\n   *\n   * @param {string} proxy The URL of a proxy to use.\n   * @return {!Builder} A self reference.\n   */\n  usingWebDriverProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * @return {?string} The URL of the proxy server to use for the WebDriver's\n   *    HTTP connections, or `null` if not set.\n   */\n  getWebDriverProxy() {\n    return this.proxy_;\n  }\n\n  /**\n   * Sets the http agent to use for each request.\n   * If this method is not called, the Builder will use http.globalAgent by default.\n   *\n   * @param {http.Agent} agent The agent to use for each request.\n   * @return {!Builder} A self reference.\n   */\n  usingHttpAgent(agent) {\n    this.agent_ = agent;\n    return this;\n  }\n\n  /**\n   * @return {http.Agent} The http agent used for each request\n   */\n  getHttpAgent() {\n    return this.agent_;\n  }\n\n  /**\n   * Sets the desired capabilities when requesting a new session. This will\n   * overwrite any previously set capabilities.\n   * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n   *     a new session.\n   * @return {!Builder} A self reference.\n   */\n  withCapabilities(capabilities) {\n    this.capabilities_ = new Capabilities(capabilities);\n    return this;\n  }\n\n  /**\n   * Returns the base set of capabilities this instance is currently configured\n   * to use.\n   * @return {!Capabilities} The current capabilities for this builder.\n   */\n  getCapabilities() {\n    return this.capabilities_;\n  }\n\n  /**\n   * Configures the target browser for clients created by this instance.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * You may also define the target browser using the {@code SELENIUM_BROWSER}\n   * environment variable. If set, this environment variable should be of the\n   * form `browser[:[version][:platform]]`.\n   *\n   * @param {(string|!Browser)} name The name of the target browser;\n   *     common defaults are available on the {@link webdriver.Browser} enum.\n   * @param {string=} opt_version A desired version; may be omitted if any\n   *     version should be used.\n   * @param {(string|!capabilities.Platform)=} opt_platform\n   *     The desired platform; may be omitted if any platform may be used.\n   * @return {!Builder} A self reference.\n   */\n  forBrowser(name, opt_version, opt_platform) {\n    this.capabilities_.setBrowserName(name);\n    if (opt_version) {\n      this.capabilities_.setBrowserVersion(opt_version);\n    }\n    if (opt_platform) {\n      this.capabilities_.setPlatform(opt_platform);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the proxy configuration for the target browser.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * @param {!./lib/proxy.Config} config The configuration to use.\n   * @return {!Builder} A self reference.\n   */\n  setProxy(config) {\n    this.capabilities_.setProxy(config);\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the created session. Preferences may be\n   * changed by repeated calls, or by calling {@link #withCapabilities}.\n   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n   *     desired logging preferences.\n   * @return {!Builder} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.capabilities_.setLoggingPrefs(prefs);\n    return this;\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   *\n   * @param {?capabilities.UserPromptHandler} behavior The desired behavior.\n   * @return {!Builder} A self reference.\n   * @see capabilities.Capabilities#setAlertBehavior\n   */\n  setAlertBehavior(behavior) {\n    this.capabilities_.setAlertBehavior(behavior);\n    return this;\n  }\n\n  /**\n   * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!chrome.Options} options The ChromeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeOptions(options) {\n    this.chromeOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {chrome.Options} the Chrome specific options currently configured\n   *     for this builder.\n   */\n  getChromeOptions() {\n    return this.chromeOptions_;\n  }\n\n  /**\n   * Sets the service builder to use for managing the chromedriver child process\n   * when creating new Chrome sessions.\n   *\n   * @param {chrome.ServiceBuilder} service the service to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeService(service) {\n    if (service && !(service instanceof chrome.ServiceBuilder)) {\n      throw TypeError('not a chrome.ServiceBuilder object');\n    }\n    this.chromeService_ = service;\n    return this;\n  }\n\n  /**\n   * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!firefox.Options} options The FirefoxDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setFirefoxOptions(options) {\n    this.firefoxOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {firefox.Options} the Firefox specific options currently configured\n   *     for this instance.\n   */\n  getFirefoxOptions() {\n    return this.firefoxOptions_;\n  }\n\n  /**\n   * Sets the {@link firefox.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating Firefox sessions locally.\n   *\n   * @param {firefox.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setFirefoxService(service) {\n    if (service && !(service instanceof firefox.ServiceBuilder)) {\n      throw TypeError('not a firefox.ServiceBuilder object');\n    }\n    this.firefoxService_ = service;\n    return this;\n  }\n\n  /**\n   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n   * created by this builder. Any proxy settings defined on the given options\n   * will take precedence over those set through {@link #setProxy}.\n   *\n   * @param {!ie.Options} options The IEDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setIeOptions(options) {\n    this.ieOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n   * for drivers created by this builder. Any proxy settings defined on the\n   * given options will take precedence over those set through\n   * {@link #setProxy}.\n   *\n   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setEdgeOptions(options) {\n    this.edgeOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Sets the {@link edge.ServiceBuilder} to use to manage the\n   * MicrosoftEdgeDriver child process when creating sessions locally.\n   *\n   * @param {edge.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setEdgeService(service) {\n    if (service && !(service instanceof edge.ServiceBuilder)) {\n      throw TypeError('not a edge.ServiceBuilder object');\n    }\n    this.edgeService_ = service;\n    return this;\n  }\n\n  /**\n   * Sets Safari specific {@linkplain safari.Options options} for drivers\n   * created by this builder. Any logging settings defined on the given options\n   * will take precedence over those set through {@link #setLoggingPrefs}.\n   *\n   * @param {!safari.Options} options The Safari options to use.\n   * @return {!Builder} A self reference.\n   */\n  setSafariOptions(options) {\n    this.safariOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {safari.Options} the Safari specific options currently configured\n   *     for this instance.\n   */\n  getSafariOptions() {\n    return this.safariOptions_;\n  }\n\n  /**\n   * Creates a new WebDriver client based on this builder's current\n   * configuration.\n   *\n   * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n   * users to issue commands directly without calling `then()`. The returned\n   * thenable wraps a promise that will resolve to a concrete\n   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n   * rejected if the remote end fails to create a new session.\n   *\n   * @return {!ThenableWebDriver} A new WebDriver instance.\n   * @throws {Error} If the current configuration is invalid.\n   */\n  build() {\n    // Create a copy for any changes we may need to make based on the current\n    // environment.\n    var capabilities = new Capabilities(this.capabilities_);\n\n    var browser;\n    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`);\n      browser = process.env.SELENIUM_BROWSER.split(/:/, 3);\n      capabilities.setBrowserName(browser[0]);\n\n      browser[1] && capabilities.setBrowserVersion(browser[1]);\n      browser[2] && capabilities.setPlatform(browser[2]);\n    }\n\n    browser = capabilities.get(Capability.BROWSER_NAME);\n\n    if (typeof browser !== 'string') {\n      throw TypeError(\n          `Target browser must be a string, but is <${typeof browser}>;` +\n          ' did you forget to call forBrowser()?');\n    }\n\n    if (browser === 'ie') {\n      browser = Browser.INTERNET_EXPLORER;\n    }\n\n    // Apply browser specific overrides.\n    if (browser === Browser.CHROME && this.chromeOptions_) {\n      capabilities.merge(this.chromeOptions_);\n\n    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n      capabilities.merge(this.firefoxOptions_);\n\n    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n      capabilities.merge(this.ieOptions_);\n\n    } else if (browser === Browser.SAFARI && this.safariOptions_) {\n      capabilities.merge(this.safariOptions_);\n\n    } else if (browser === Browser.EDGE && this.edgeOptions_) {\n      capabilities.merge(this.edgeOptions_);\n    }\n\n    checkOptions(\n        capabilities, 'chromeOptions', chrome.Options, 'setChromeOptions');\n    checkOptions(\n        capabilities, 'moz:firefoxOptions', firefox.Options,\n        'setFirefoxOptions');\n    checkOptions(\n        capabilities, 'safari.options', safari.Options, 'setSafariOptions');\n\n    // Check for a remote browser.\n    let url = this.url_;\n    if (!this.ignoreEnv_) {\n      if (process.env.SELENIUM_REMOTE_URL) {\n        this.log_.fine(\n            `SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`);\n        url = process.env.SELENIUM_REMOTE_URL;\n      } else if (process.env.SELENIUM_SERVER_JAR) {\n        this.log_.fine(\n            `SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`);\n        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR);\n      }\n    }\n\n    if (url) {\n      this.log_.fine('Creating session on remote server');\n      let client = Promise.resolve(url)\n          .then(url => new _http.HttpClient(url, this.agent_, this.proxy_));\n      let executor = new _http.Executor(client);\n\n      if (browser === Browser.CHROME) {\n        const driver = ensureFileDetectorsAreEnabled(chrome.Driver);\n        return createDriver(driver, capabilities, executor);\n      }\n\n      if (browser === Browser.FIREFOX) {\n        const driver = ensureFileDetectorsAreEnabled(firefox.Driver);\n        return createDriver(driver, capabilities, executor);\n      }\n      return createDriver(WebDriver, executor, capabilities);\n    }\n\n    // Check for a native browser.\n    switch (browser) {\n      case Browser.CHROME: {\n        let service = null;\n        if (this.chromeService_) {\n          service = this.chromeService_.build();\n        }\n        return createDriver(chrome.Driver, capabilities, service);\n      }\n\n      case Browser.FIREFOX: {\n        let service = null;\n        if (this.firefoxService_) {\n          service = this.firefoxService_.build();\n        }\n        return createDriver(firefox.Driver, capabilities, service);\n      }\n\n      case Browser.INTERNET_EXPLORER:\n        return createDriver(ie.Driver, capabilities);\n\n      case Browser.EDGE: {\n        let service = null;\n        if (this.edgeService_) {\n          service = this.edgeService_.build();\n        }\n        return createDriver(edge.Driver, capabilities, service);\n      }\n\n      case Browser.SAFARI:\n        return createDriver(safari.Driver, capabilities);\n\n      default:\n        throw new Error('Do not know how to build driver: ' + browser\n            + '; did you forget to call usingServer(url)?');\n    }\n  }\n}\n\n\n/**\n * In the 3.x releases, the various browser option classes\n * (e.g. firefox.Options) had to be manually set as an option using the\n * Capabilties class:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let caps = new Capabilities();\n *     caps.set('moz:firefoxOptions', ffo);\n *\n *     let driver = new Builder()\n *         .withCapabilities(caps)\n *         .build();\n *\n * The options are now subclasses of Capabilities and can be used directly. A\n * direct translation of the above is:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let driver = new Builder()\n *         .withCapabilities(ffo)\n *         .build();\n *\n * You can also set the options for various browsers at once and let the builder\n * choose the correct set at runtime (see Builder docs above):\n *\n *     let ffo = new firefox.Options();\n *     // Configure ...\n *\n *     let co = new chrome.Options();\n *     // Configure ...\n *\n *     let driver = new Builder()\n *         .setChromeOptions(co)\n *         .setFirefoxOptions(ffo)\n *         .build();\n *\n * @param {!Capabilities} caps\n * @param {string} key\n * @param {function(new: Capabilities)} optionType\n * @param {string} setMethod\n * @throws {error.InvalidArgumentError}\n */\nfunction checkOptions(caps, key, optionType, setMethod) {\n  let val = caps.get(key);\n  if (val instanceof optionType) {\n    throw new error.InvalidArgumentError(\n        'Options class extends Capabilities and should not be set as key '\n            + `\"${key}\"; set browser-specific options with `\n            + `Builder.${setMethod}(). For more information, see the `\n            + 'documentation attached to the function that threw this error');\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Browser = capabilities.Browser;\nexports.Builder = Builder;\nexports.Button = input.Button;\nexports.By = by.By;\nexports.Capabilities = capabilities.Capabilities;\nexports.Capability = capabilities.Capability;\nexports.Condition = webdriver.Condition;\nexports.FileDetector = input.FileDetector;\nexports.Key = input.Key;\nexports.Session = session.Session;\nexports.ThenableWebDriver = ThenableWebDriver;\nexports.WebDriver = webdriver.WebDriver;\nexports.WebElement = webdriver.WebElement;\nexports.WebElementCondition = webdriver.WebElementCondition;\nexports.WebElementPromise = webdriver.WebElementPromise;\nexports.error = error;\nexports.logging = logging;\nexports.promise = promise;\nexports.until = until;\n\n\n\n// WEBPACK FOOTER //\n// node_modules/selenium-webdriver/index.js"],"sourceRoot":"webpack:///"}